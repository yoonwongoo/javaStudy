템플릿 메소드 패턴
추상클래스와 구현클래스로 작성을 하며, 메인이 되는 실행 부분에는 추상클래스의 메소드를 실행을 하여서 실행
-> 즉 하나의 추상클래스는 여러개의 구현클래스를 가지고 있을 수 있으며, 그 각각 구현클래스마다 행위가 다를 수 있다.
그래서 각각 구현 클래스는 구현하고 실행 시에는 추상클래스의 메소드를 실행 시킴.

장점: 코드 중복제거, 구현클래스 및 자식클래스 확장에 용이, 핵심로직을 관리하기 용이.
단점: 추상메소드가 많아지면 관리가 하기가 복잡. 추상클래스와 구현클래스가 복잡하게 꼬여있을 수가 있음.


일정한 프로세스 를 가진 요구사항을 템플릿 메소드 패턴을 이용하여 구현할 수 있습니다.
ex: Spring Security의 인증및 인가과정,  애노테이션 프로세서의 라운드구조, 로직의 완성까지의 로직이 순차적인 일정한 단계가 있는 경우 등.